
00.术语
===========
.. important:: 

  Someone who is sophomoric about concepts and reasoning may 
  try things randomly, and wastes a lot of time.

1.容器适配器(container adapter)
--------------------------------
- 修改一个 **底层序列容器**，使其表现出新的功能和接口，比如 `stack <https://en.cppreference.com/w/cpp/container/stack>`_  使 ``deque``
  表现出了后进先出的栈功能

- 容器适配器有 ``stack``, ``queue``, `priority_queue <https://en.cppreference.com/w/cpp/container/priority_queue>`_ 
.. code-block:: c++
p
    #include <deque>
    #include <iostream>
    #include <list>
    #include <stack>
    #include <vector>
    using namespace std;

    int main() {
        // stack的构造 
        stack<int> stackA;
        stack<int, deque<int>> stackB;  // deque is the default container
        stack<int, vector<int>> stackC;
        stack<int, list<int>> stackD;
        return 0;
    }

2.类型适配器(container adapter)
--------------------------------



3.cv 修饰/限定符(const and volatile qualifier)
------------------------------------------------

const qualifier(修饰符)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 修饰变量，说明该变量是只读的（类似python的不可变对象）
* 修饰指针：常指针，该指针的指向不发生变化
* 修饰引用，指向常量的引用(reference to const)。用于修饰形参，既避免了拷贝，又避免函数对值的修改。
* 修饰成员函数，说明在该成员函数内不能修改成员变量（在成员属性声明时加关键词mutable，在常函数中则可以修改）

.. hint:: const修饰成员函数本质上是修饰this指针


.. code-block:: c++

  // 类
  class A
  {
  private:
      const int a;                // 常对象成员，只能在初始化列表赋值

  public:
      // 构造函数
      A() : a(0) { };
      A(int x) : a(x) { };        // 初始化列表

      // const可用于对重载函数的区分
      int getValue();             // 普通成员函数
      int getValue() const;       // 常成员函数，不得修改类中的任何数据成员的值
  };

  void function()
  {
      // 对象
      A b;                        // 普通对象，可以调用全部成员函数、更新常成员变量
      const A a;                  // 常对象，只能调用常成员函数
      const A *p = &a;            // 指针变量，指向常对象
      const A &q = a;             // 指向常对象的引用

      // 指针
      char greeting[] = "Hello";
      char* p1 = greeting;                // 指针变量，指向字符数组变量
      const char* p2 = greeting;          // 指向常量的指针
      char* const p3 = greeting;          // 常指针（指针的指向不能发生改变）
      const char* const p4 = greeting;    // 指向常量的指针
  }

  // 函数
  void function1(const int Var);           // 形参只读
  void function2(const char* Var);         // 形参为指针，指向的对象只读
  void function3(char* const Var);         // 形参为指针，指针为常指针
  void function4(const int& Var);          // 常量的引用

  // 函数返回值
  const int function5();      // 返回一个常数
  const int* function6();     // 返回一个指针，指针指向常量
  int* const function7();     // 返回一个常指针



4.说明符(specifier)
-------------------
static specifier
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
根据不同的对象，表现出不同的作用

1. 修饰普通变量，修改变量的存储区域和生命周期（lifetime），使变量存储在静态区，在main函数运行前就分配了空间
2. 修饰普通函数（描述该函数具有内部链接性），将域拓展到整个文件。在多人开发项目中，为了防止与他人命名空间里的函数重名，可以将函数定位为static
3. 修饰类成员
   
   - 修饰成员变量（相当于声明类属性）：所有对象能共享同一份数据；在编译阶段分配内存；其是类内声明，类外定义；访问时可通过对象或类名进行访问；也可以有访问权限的(private, protected, public)
   - 修饰成员函数（相当于声明类方法）：所有对象共享同一个函数；该方法不能访问实例属性；类内声明，类外定义；访问时可通过对象或类名进行访问；也可以有访问权限(private, protected, public)

5.引用
-------------------
`dangling reference <https://en.cppreference.com/w/cpp/language/reference>`_ 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
当引用的对象的lifetime已经结束了，那此时的引用则为 ``dangling reference``

.. code-block:: c++

  std::string &f() {
      std::string s = "Example";
      return s; // exits the scope of s:
      // its destructor is called and its storage deallocated
  }

  int main() {
      std::string &r = f(); // dangling reference
      std::cout << r;       // undefined behavior: reads from a dangling reference
      std::string s = f();  // undefined behavior: copy-initializes from a dangling reference
  }

.. note:: 报错信息为段错误


6. 左值和右值
--------------------
- 左值和右值都是 ``expression``。根据expression的取值(evaluation)来区别是左值表达式还是右值表达式。
- 泛左值不是亡值就是左值；能取地址（i.e能使用&操作符）的才是泛左值
- 右值可能是亡值，也可能是纯右值

7. `内存泄露 <https://en.cppreference.com/w/cpp/language/new>`_
----------------------------------------------------------------------
- new返回的指针被释放，导致原来被指向的对象不能通过该指针来访问和不能使用delete来释放

8. `标识符(identifier) <https://en.cppreference.com/w/c/language/identifier>`_ 
---------------------------------------------------------------------------------------------
- 标识符是一个任意长度的序列，该序列由下划线、数字和拉丁字母组成
- 可用于描述程序中的如下实体：对象(objects)，函数(function)，tags(struct, union, enumerations)，结构体和联合体成员...
- 标识符不能任意起名，存在起名规则

9. `对象(object) <https://en.cppreference.com/w/cpp/language/object>`_ 
---------------------------------------------------------------------------------------------
- 在C中对象是一块内存空间，这个空间存放了值(value)
- 每个对象都要相应的属性：size, storage duration, lifetime, value, identifier(i.e.id optional)
- 对象或者引用（需非类属性）是 ``变量(variable)``

.. attention:: 
    以下实体(entities)不是对象：值(value), 引用(reference)，函数(function)，参数包(parameter pack)

1.  `实体(entiry) <https://en.cppreference.com/w/cpp/language/basic_concepts>`_ 
---------------------------------------------------------------------------------------------
- c++程序中的实体包括值(value)，对象(object)，引用(reference)，函数(function)，类型(type)，模板（template）...

.. attention:: 
    预处理宏(prepocessor entity)不是c++实体
