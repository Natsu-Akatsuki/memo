05.Q&A
===========

1.在写函数时，形参使用指针好还是引用好？
--------------------------------------

引用会更好，因为可以不用判断参数是否为\ ``null``


2.为什么在位运算时会有整型提升？
--------------------------------------
硬件对int型数据有更好的处理效率（是最常使用的数据类型），因此在进行位运算时会将数据转换为整型

.. code-block:: c++
    
    int main() {
        char a = 0x00;
        char b = 0x01;
        auto c = a & b;
        cout << is_same_v<int, decltype(c)> << endl;  // true
    }

3.初始化和赋值的区别？
--------------------------------------
- 初始化（原来没值）：是将一个值存到对象中（i.e. 将value和object进行绑定）；初始化包含在内存中开辟空间，
  将值存到该空间中和在编译器中构造符号表，将标识符和相关内存空间关联起来
  （如此，如果要用到一个变量名为a的变量时，就知道在内存的哪个地方找到这个变量）
- 赋值（原来有值）：改变一个对象中的值


.. code-block:: bash
  
  # hint: 查看符号表
  # -C: demangle
  $ nm -C <.o文件>

4. `分配了内存，对象的生存期就开始了吗 <https://zh.cppreference.com/w/cpp/language/lifetime#Access_outside_of_lifetime>`_   
---------------------------------------------------------------------------------------------------------------------
或有分配了内存，但生存期还未开始；亦有生存期结束但存储空间尚未释放或重用的时间段


5. `变量在内存的存储位置？（内存模型） <https://www.bilibili.com/video/BV1et411b73Z?p=84>`_ 
---------------------------------------------------------------------------------------------------------------------
c++程序所占的内存可以划分为4个区域（谐音梗：四驱兄弟）

- ``代码区`` ：存放函数体的二进制代码；由操作系统进行管理的；其中的内容是只读（防止修改程序的执行指令）和共享的（只有一份数据，避免拷贝浪费）
- ``全局区`` ：存放全局变量 、静态变量、字符串字面值常量；该部分数据由操作系统释放
- ``栈区`` ：存放函数的参数值，局部变量；由编译器自动分配释放，数据的生存周期由编译器管理）
- ``堆区`` ：数据的生存周期由程序员管理；若不释放，程序结束时由操作系统释放